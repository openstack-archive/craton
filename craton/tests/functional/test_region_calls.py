import urllib.parse

from craton.tests.functional import TestCase


class RegionTests(TestCase):
    def setUp(self):
        super(RegionTests, self).setUp()
        self.cloud = self.create_cloud()

    def create_cloud(self):
        return super(RegionTests, self).create_cloud(name='cloud-1')

    def create_region(self, name, variables=None):
        return super(RegionTests, self).create_region(
            name=name,
            cloud=self.cloud,
            variables=variables
        )


class APIV1RegionTest(RegionTests):
    """Test cases for /region calls.
    One set of data for the test is generated by fake data generateion
    script during test module setup.
    """

    def test_create_region_full_data(self):
        # Test with full set of allowed parameters
        values = {"name": "region-new",
                  "note": "This is region-new.",
                  "cloud_id": self.cloud['id'],
                  "variables": {"a": "b"}}
        url = self.url + '/v1/regions'
        resp = self.post(url, data=values)
        self.assertEqual(201, resp.status_code)
        self.assertIn('Location', resp.headers)
        self.assertEqual(
            resp.headers['Location'],
            "{}/{}".format(url, resp.json()['id'])
        )
        self.assertEqual(values['name'], resp.json()['name'])

    def test_create_region_without_variables(self):
        values = {"name": "region-two",
                  "note": "This is region-two",
                  "cloud_id": self.cloud['id']}
        url = self.url + '/v1/regions'
        resp = self.post(url, data=values)
        self.assertEqual(201, resp.status_code)
        self.assertIn('Location', resp.headers)
        self.assertEqual(
            resp.headers['Location'],
            "{}/{}".format(url, resp.json()['id'])
        )
        self.assertEqual("region-two", resp.json()['name'])

    def test_create_region_with_no_name_fails(self):
        values = {"note": "This is region one.", "cloud_id": self.cloud['id']}
        url = self.url + '/v1/regions'
        resp = self.post(url, data=values)
        self.assertEqual(resp.status_code, 400)
        err_msg = ["'name' is a required property"]
        self.assertEqual(resp.json()['errors'], err_msg)

    def test_create_region_with_no_cloud_id_fails(self):
        values = {"name": "I don't work at all, you know."}
        url = self.url + '/v1/regions'
        resp = self.post(url, data=values)
        self.assertEqual(resp.status_code, 400)
        err_msg = ["'cloud_id' is a required property"]
        self.assertEqual(resp.json()['errors'], err_msg)

    def test_create_region_with_duplicate_name_fails(self):
        self.create_region("ORD135")

        values = {"name": "ORD135", "cloud_id": self.cloud['id']}
        url = self.url + '/v1/regions'
        resp = self.post(url, data=values)
        self.assertEqual(409, resp.status_code)

    def test_create_region_with_extra_id_property_fails(self):
        values = {"name": "test", 'cloud_id': self.cloud['id'], "id": 101}
        url = self.url + '/v1/regions'
        resp = self.post(url, data=values)
        self.assertEqual(resp.status_code, 400)
        msg = ["Additional properties are not allowed ('id' was unexpected)"]
        self.assertEqual(resp.json()['errors'], msg)

    def test_create_region_with_extra_created_at_property_fails(self):
        values = {"name": "test", 'cloud_id': self.cloud['id'],
                  "created_at": "some date"}
        url = self.url + '/v1/regions'
        resp = self.post(url, data=values)
        self.assertEqual(resp.status_code, 400)
        msg = ["Additional properties are not allowed "
               "('created_at' was unexpected)"]
        self.assertEqual(resp.json()['errors'], msg)

    def test_create_region_with_extra_updated_at_property_fails(self):
        values = {"name": "test", 'cloud_id': self.cloud['id'],
                  "updated_at": "some date"}
        url = self.url + '/v1/regions'
        resp = self.post(url, data=values)
        self.assertEqual(resp.status_code, 400)
        msg = ["Additional properties are not allowed "
               "('updated_at' was unexpected)"]
        self.assertEqual(resp.json()['errors'], msg)

    def test_regions_get_all(self):
        self.create_region("ORD1")
        self.create_region("ORD2")
        url = self.url + '/v1/regions'
        resp = self.get(url)
        self.assertEqual(200, resp.status_code)
        self.assertEqual(2, len(resp.json()))

    def test_regions_get_all_with_name_filter(self):
        self.create_region("ORD1")
        self.create_region("ORD2")
        url = self.url + '/v1/regions?name=ORD1'
        resp = self.get(url)
        self.assertEqual(200, resp.status_code)
        regions = resp.json()['regions']
        self.assertEqual(1, len(regions))
        self.assertEqual('ORD1', regions[0]['name'])

    def test_regions_get_all_for_cloud(self):
        for i in range(2):
            self.create_region("ORD{}".format(str(i)))
        url = self.url + '/v1/regions?cloud_id={}'.format(self.cloud['id'])
        resp = self.get(url)
        self.assertEqual(200, resp.status_code)
        regions = resp.json()['regions']
        self.assertEqual(2, len(regions))
        self.assertEqual(['ORD0', 'ORD1'], [r['name'] for r in regions])

    def test_region_with_non_existing_filters(self):
        self.create_region("ORD1")
        url = self.url + '/v1/regions?name=idontexist'
        resp = self.get(url)
        self.assertEqual(404, resp.status_code)

    def test_region_get_details_for_region(self):
        regvars = {"a": "b", "one": "two"}
        region = self.create_region("ORD1", variables=regvars)
        url = self.url + '/v1/regions/{}'.format(region['id'])
        resp = self.get(url)
        region = resp.json()
        self.assertEqual(region['name'], 'ORD1')
        self.assertEqual(regvars, region['variables'])


class TestPagination(RegionTests):

    def setUp(self):
        super(TestPagination, self).setUp()
        self.regions = [self.create_region('region-{}'.format(i))
                        for i in range(0, 61)]
        self.addCleanup(self.delete_regions, self.regions)

    def test_list_first_thirty_regions(self):
        url = self.url + '/v1/regions'
        response = self.get(url)
        self.assertSuccessOk(response)
        json = response.json()
        self.assertIn('regions', json)
        self.assertEqual(30, len(json['regions']))
        self.assertListEqual([r['id'] for r in self.regions[:30]],
                             [r['id'] for r in json['regions']])

    def test_get_returns_correct_next_link(self):
        url = self.url + '/v1/regions'
        thirtieth_region = self.regions[29]
        response = self.get(url)
        self.assertSuccessOk(response)
        json = response.json()
        self.assertIn('links', json)
        for link_rel in json['links']:
            if link_rel['rel'] == 'next':
                break
        else:
            self.fail("No 'next' link was returned in response")

        parsed_next = urllib.parse.urlparse(link_rel['href'])
        self.assertIn('marker={}'.format(thirtieth_region['id']),
                      parsed_next.query)

    def test_get_returns_correct_prev_link(self):
        first_region = self.regions[0]
        thirtieth_region = self.regions[29]
        url = self.url + '/v1/regions?marker={}'.format(thirtieth_region['id'])
        response = self.get(url)
        self.assertSuccessOk(response)
        json = response.json()
        self.assertIn('links', json)
        for link_rel in json['links']:
            if link_rel['rel'] == 'prev':
                break
        else:
            self.fail("No 'prev' link was returned in response")

        parsed_prev = urllib.parse.urlparse(link_rel['href'])
        self.assertIn('marker={}'.format(first_region['id']),
                      parsed_prev.query)

    def test_follow_all_region_links(self):
        url = self.url + '/v1/regions'
        response = self.get(url)
        self.assertSuccessOk(response)
        json = response.json()
        regions = json['regions']
        while regions:
            for link in json['links']:
                if link['rel'] == 'next':
                    break
            else:
                break
            response = self.get(link['href'])
            self.assertSuccessOk(response)
            json = response.json()
            regions = json['regions']
