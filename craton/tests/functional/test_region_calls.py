from craton.tests.functional import TestCase


class APIV1RegionTest(TestCase):
    """Test cases for /region calls.
    One set of data for the test is generated by fake data generateion
    script during test module setup.
    """

    def setUp(self):
        super(APIV1RegionTest, self).setUp()

    def test_create_region_full_data(self):
        # Test with full set of allowed parameters
        values = {"name": "region-new",
                  "note": "This is region-new.",
                  "variables": {"a": "b"}}
        expected = {"id": 3,
                    "name": "region-new",
                    "note": "This is region-new.",
                    "variables": {"a": "b"}}
        url = self.url + '/v1/regions'
        resp = self.post(url, **values)
        self.assertEqual(200, resp.status_code)
        self.assertEqual(expected, resp.json())

    def test_create_region_without_variables(self):
        values = {"name": "region-two",
                  "note": "This is region-two"}
        expected = {"id": 4,
                    "name": "region-two",
                    "note": "This is region-two",
                    "variables": {}}
        url = self.url + '/v1/regions'
        resp = self.post(url, **values)
        self.assertEqual(200, resp.status_code)
        self.assertEqual(expected, resp.json())

    def test_create_region_with_no_name_fails(self):
        values = {"note": "This is region one."}
        url = self.url + '/v1/regions'
        resp = self.post(url, **values)
        self.assertEqual(resp.status_code, 422)
        err_msg = ["'name' is a required property"]
        self.assertEqual(resp.json()['errors'], err_msg)

    def test_create_region_with_duplicate_name_fails(self):
        values = {"name": "ORD135"}
        url = self.url + '/v1/regions'
        resp = self.post(url, **values)
        self.assertEqual(409, resp.status_code)

    def test_region_delete(self):
        url = self.url + '/v1/regions/4'
        resp = self.delete(url)
        self.assertEqual(resp.status_code, 200)

    def test_regions_get_all(self):
        url = self.url + '/v1/regions'
        resp = self.get(url)
        self.assertEqual(resp.status_code, 200)
        # We should have 4 regions, 2 generated by fake data script
        # and the 2 that was created above then 1 deleted.
        self.assertEqual(3, len(resp.json()))

    def test_regions_get_all_with_name_filter(self):
        url = self.url + '/v1/regions?name=ORD135'
        resp = self.get(url)
        self.assertEqual(resp.status_code, 200)
        self.assertEqual(len(resp.json()), 1)
        self.assertEqual('ORD135', resp.json()[0]['name'])

    def test_region_with_non_existing_filters(self):
        url = self.url + '/v1/regions?name=idontexist'
        resp = self.get(url)
        self.assertEqual(404, resp.status_code)

    def test_region_get_details_for_region(self):
        url = self.url + '/v1/regions/1'
        resp = self.get(url)
        region = resp.json()
        self.assertEqual(region['name'], 'ORD135')
        expected_vars = {'glance_default_store': 'swift',
                         'neutron_l2_population': True,
                         'nova_console_type': 'novnc',
                         'tempest_public_subnet_cidr': '192.168.1.0/22'}
        self.assertEqual(expected_vars, region['variables'])
